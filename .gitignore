<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Molecule Builder</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        .bg-gradient {
            background-image: linear-gradient(135deg, #1f2937 0%, #0d121c 100%);
        }
        .card {
            background-color: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
        }
        .btn-element {
            transition: all 0.2s ease-in-out;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .btn-element:hover {
            transform: translateY(-2px) scale(1.05);
            background-color: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.5);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        .btn-calc {
            background-color: #4b5563;
        }
        .btn-calc:hover {
            background-color: #6b7280;
        }
        .btn-action {
            background-color: #3b82f6;
            transition: background-color 0.2s ease-in-out, transform 0.2s ease-in-out;
        }
        .btn-action:hover {
            background-color: #2563eb;
            transform: translateY(-1px);
        }
        .btn-danger {
            background-color: #ef4444;
        }
        .btn-danger:hover {
            background-color: #dc2626;
        }
        .btn-success {
            background-color: #22c55e;
        }
        .btn-success:hover {
            background-color: #16a34a;
        }
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.85);
            border-radius: 12px;
            padding: 3rem 2rem;
            color: white;
            z-index: 100;
            box-shadow: 0 10px 25px rgba(0,0,0,0.5);
        }
        .message-box p {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
        }
    </style>
</head>
<body class="bg-gradient text-white flex items-center justify-center min-h-screen p-4">

    <!-- Main Game Container -->
    <div class="container mx-auto p-8 max-w-4xl bg-gray-900 rounded-3xl shadow-2xl flex flex-col md:flex-row gap-8">

        <!-- Game Section -->
        <div class="flex-1 space-y-8">
            <h1 class="text-4xl font-bold text-center text-blue-400">Molecule Builder</h1>
            <p class="text-center text-gray-400">Combine elements to create a stable molecule!</p>

            <!-- Difficulty & Info -->
            <div class="flex flex-col sm:flex-row justify-center items-center gap-4 text-center">
                <div class="flex items-center gap-2">
                    <label for="difficulty" class="text-gray-300">Difficulty:</label>
                    <select id="difficulty" class="px-3 py-1 bg-gray-700 text-white rounded-lg cursor-pointer transition-colors duration-200 hover:bg-gray-600">
                        <option value="easy">Easy</option>
                        <option value="medium">Medium</option>
                        <option value="hard">Hard</option>
                    </select>
                </div>
                <div class="text-gray-300">Molecules Built: <span id="molecules-built" class="font-bold text-blue-300">0</span></div>
            </div>

            <!-- Game Display -->
            <div class="card p-6 rounded-2xl border border-gray-700 shadow-inner space-y-4">
                <div class="text-xl text-center text-gray-300">
                    <p class="text-blue-300 font-bold text-2xl" id="target-title"></p>
                    <p class="mt-1 text-sm font-mono" id="target-formula"></p>
                    <p class="mt-2 text-base text-gray-400" id="target-description"></p>
                </div>
                <div id="how-it-works" class="text-center text-sm text-gray-400">
                    Your goal is to match the correct **molar ratio** of elements to build the molecule. Use the elements below to find the right combination!
                </div>
                <div id="current-molecule" class="min-h-[100px] bg-gray-800 p-4 rounded-xl flex flex-wrap items-center justify-center gap-2 border border-dashed border-gray-600">
                    <p class="text-gray-500">Select elements to begin...</p>
                </div>
                <p class="text-center text-2xl font-bold">Total Molar Mass: <span id="molar-mass" class="text-blue-300">0.00</span> g/mol</p>
                <div class="flex gap-4 justify-center">
                    <button id="check-btn" class="btn-action px-6 py-3 rounded-xl font-bold shadow-md hover:shadow-lg disabled:opacity-50 transition-transform duration-200">Check Formula</button>
                    <button id="clear-btn" class="btn-danger px-6 py-3 rounded-xl font-bold shadow-md hover:shadow-lg transition-transform duration-200">Clear</button>
                    <button id="hint-btn" class="btn-calc px-6 py-3 rounded-xl font-bold shadow-md hover:shadow-lg transition-transform duration-200 hidden">Hint</button>
                </div>
                <div id="game-message" class="text-center mt-4 font-bold min-h-[2rem]"></div>
            </div>

            <!-- Element Selection -->
            <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
                <!-- Elements will be generated here by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Message Box (hidden by default) -->
    <div id="message-box" class="hidden message-box">
        <div class="flex flex-col items-center">
            <p id="message-text" class="text-center"></p>
            <button id="message-btn" class="btn-action px-8 py-3 rounded-xl text-lg font-bold">OK</button>
        </div>
    </div>

    <script>
        const elementsData = [
            { symbol: 'H', name: 'Hydrogen', mass: 1.01 },
            { symbol: 'O', name: 'Oxygen', mass: 16.00 },
            { symbol: 'C', name: 'Carbon', mass: 12.01 },
            { symbol: 'N', name: 'Nitrogen', mass: 14.01 },
            { symbol: 'Cl', name: 'Chlorine', mass: 35.45 },
            { symbol: 'Na', name: 'Sodium', mass: 22.99 },
            { symbol: 'S', name: 'Sulfur', mass: 32.07 },
            { symbol: 'P', name: 'Phosphorus', mass: 30.97 },
            { symbol: 'Mg', name: 'Magnesium', mass: 24.31 },
            { symbol: 'K', name: 'Potassium', mass: 39.10 },
            { symbol: 'Fe', name: 'Iron', mass: 55.85 },
            { symbol: 'Ca', name: 'Calcium', mass: 40.08 },
            { symbol: 'Al', name: 'Aluminum', mass: 26.98 },
            { symbol: 'Si', name: 'Silicon', mass: 28.09 },
            { symbol: 'F', name: 'Fluorine', mass: 19.00 },
            { symbol: 'Br', name: 'Bromine', mass: 79.90 },
        ];

        const moleculesData = {
            easy: [
                { name: 'Water', formula: 'H₂O', atoms: { 'H': 2, 'O': 1 }, moles: 1, description: 'The most abundant molecule on Earth, essential for life.' },
                { name: 'Carbon Dioxide', formula: 'CO₂', atoms: { 'C': 1, 'O': 2 }, moles: 1, description: 'A greenhouse gas used by plants for photosynthesis.' },
                { name: 'Methane', formula: 'CH₄', atoms: { 'C': 1, 'H': 4 }, moles: 1, description: 'The primary component of natural gas.' },
                { name: 'Ammonia', formula: 'NH₃', atoms: { 'N': 1, 'H': 3 }, moles: 1, description: 'A common cleaning agent with a distinctive, sharp smell.' },
                { name: 'Hydrochloric Acid', formula: 'HCl', atoms: { 'H': 1, 'Cl': 1 }, moles: 1, description: 'A strong acid found in stomach fluids to aid digestion.' },
                { name: 'Hydrogen Peroxide', formula: 'H₂O₂', atoms: { 'H': 2, 'O': 2 }, moles: 1, description: 'Commonly used as a mild antiseptic for minor cuts.' },
            ],
            medium: [
                { name: 'Sodium Chloride', formula: 'NaCl', atoms: { 'Na': 1, 'Cl': 1 }, moles: 1, description: 'Common table salt, an ionic compound.' },
                { name: 'Sulfuric Acid', formula: 'H₂SO₄', atoms: { 'H': 2, 'S': 1, 'O': 4 }, moles: 1, description: 'A highly corrosive acid used in industrial applications.' },
                { name: 'Baking Soda', formula: 'NaHCO₃', atoms: { 'Na': 1, 'H': 1, 'C': 1, 'O': 3 }, moles: 1, description: 'A leavening agent used in baking to make dough rise.' },
                { name: 'Glucose', formula: 'C₆H₁₂O₆', atoms: { 'C': 6, 'H': 12, 'O': 6 }, moles: 1, description: 'A simple sugar that is a key source of energy for living organisms.' },
                { name: 'Ethane', formula: 'C₂H₆', atoms: { 'C': 2, 'H': 6 }, moles: 1, description: 'The second simplest alkane hydrocarbon, found in natural gas.' },
                { name: 'Urea', formula: 'CH₄N₂O', atoms: { 'C': 1, 'H': 4, 'N': 2, 'O': 1 }, moles: 1, description: 'Used in fertilizers, and produced by the body to excrete nitrogen.' },
                { name: 'Propane', formula: 'C₃H₈', atoms: { 'C': 3, 'H': 8 }, moles: 1, description: 'A common fuel for stoves, heating, and vehicles.' },
            ],
            hard: [
                { name: 'Water', formula: 'H₂O', atoms: { 'H': 2, 'O': 1 }, moles: 2, description: 'Try to build a double portion of water molecules!' },
                { name: 'Carbon Dioxide', formula: 'CO₂', atoms: { 'C': 1, 'O': 2 }, moles: 3, description: 'Build three times the usual amount of carbon dioxide.' },
                { name: 'Sucrose', formula: 'C₁₂H₂₂O₁₁', atoms: { 'C': 12, 'H': 22, 'O': 11 }, moles: 1, description: 'Common table sugar, a disaccharide made of two simpler sugars.' },
                { name: 'Ethanol', formula: 'C₂H₆O', atoms: { 'C': 2, 'H': 6, 'O': 1 }, moles: 2, description: 'The type of alcohol found in alcoholic beverages. Build two moles of it.' },
                { name: 'Aluminum Sulfate', formula: 'Al₂(SO₄)₃', atoms: { 'Al': 2, 'S': 3, 'O': 12 }, moles: 1, description: 'Often called alum, it is used as a flocculant in water purification.' },
                { name: 'Ascorbic Acid', formula: 'C₆H₈O₆', atoms: { 'C': 6, 'H': 8, 'O': 6 }, moles: 2, description: 'Also known as Vitamin C. You need to build a larger quantity.' },
            ]
        };

        // DOM elements
        const difficultySelect = document.getElementById('difficulty');
        const moleculesBuiltEl = document.getElementById('molecules-built');
        const targetTitleEl = document.getElementById('target-title');
        const targetFormulaEl = document.getElementById('target-formula');
        const targetDescriptionEl = document.getElementById('target-description');
        const currentMoleculeEl = document.getElementById('current-molecule');
        const molarMassEl = document.getElementById('molar-mass');
        const elementGrid = document.querySelector('.grid.gap-4');
        const checkBtn = document.getElementById('check-btn');
        const clearBtn = document.getElementById('clear-btn');
        const hintBtn = document.getElementById('hint-btn');
        const gameMessageEl = document.getElementById('game-message');

        // Game state
        let moleculesBuilt = 0;
        let currentLevel = 'easy';
        let levelMolecules = [];
        let currentTarget = null;
        let currentElements = {};
        let currentMolarMass = 0;

        // Message box
        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');
        const messageBtn = document.getElementById('message-btn');

        // Helper function for showing messages
        function showMessage(text) {
            messageText.textContent = text;
            messageBox.classList.remove('hidden');
        }

        // Helper function to hide the message box
        function hideMessage() {
            messageBox.classList.add('hidden');
        }

        // Function to calculate the molar mass of a molecule
        function calculateMolarMass(atoms) {
            let totalMass = 0;
            for (const symbol in atoms) {
                const element = elementsData.find(e => e.symbol === symbol);
                if (element) {
                    totalMass += element.mass * atoms[symbol];
                }
            }
            return totalMass;
        }

        // Function to render elements on the screen
        function renderElements() {
            elementGrid.innerHTML = '';
            elementsData.forEach(element => {
                const btn = document.createElement('button');
                btn.className = 'btn-element flex flex-col items-center justify-center p-4 rounded-xl shadow-md cursor-pointer transition-colors duration-200 hover:bg-white/20';
                btn.dataset.symbol = element.symbol;
                btn.innerHTML = `
                    <span class="text-4xl font-bold text-blue-300">${element.symbol}</span>
                    <span class="text-xs text-gray-400 font-mono">${element.mass.toFixed(2)} g/mol</span>
                `;
                btn.addEventListener('click', () => addElement(element));
                elementGrid.appendChild(btn);
            });
        }

        // Function to start or restart the game
        function startGame() {
            moleculesBuilt = 0;
            moleculesBuiltEl.textContent = moleculesBuilt;
            currentLevel = difficultySelect.value;
            levelMolecules = [...moleculesData[currentLevel]];
            if (currentLevel === 'easy') {
                hintBtn.classList.add('hidden');
            } else {
                hintBtn.classList.remove('hidden');
            }
            nextMolecule();
        }

        // Function to move to the next molecule
        function nextMolecule() {
            if (levelMolecules.length === 0) {
                showMessage('Congratulations! You completed all the molecules for this difficulty level.');
                startGame(); // Restart the level
                return;
            }
            const randomIndex = Math.floor(Math.random() * levelMolecules.length);
            currentTarget = levelMolecules.splice(randomIndex, 1)[0];
            updateGameUI();
            resetGame();
        }

        // Function to update the UI based on the current target molecule
        function updateGameUI() {
            if (currentTarget.moles > 1) {
                targetTitleEl.textContent = `${currentTarget.moles} moles of ${currentTarget.name}`;
            } else {
                targetTitleEl.textContent = currentTarget.name;
            }
            // Simple formula rendering with subscript
            let formulaHtml = currentTarget.formula.replace(/(\d+)/g, '<sub>$1</sub>');
            targetFormulaEl.innerHTML = formulaHtml;
            targetDescriptionEl.textContent = currentTarget.description;
        }

        // Function to add an element to the current molecule
        function addElement(element) {
            const symbol = element.symbol;
            currentElements[symbol] = (currentElements[symbol] || 0) + 1;
            currentMolarMass += element.mass;
            renderCurrentMolecule();
        }

        // Function to render the selected elements in the UI
        function renderCurrentMolecule() {
            currentMoleculeEl.innerHTML = '';
            if (Object.keys(currentElements).length === 0) {
                currentMoleculeEl.innerHTML = '<p class="text-gray-500">Select elements to begin...</p>';
            } else {
                for (const symbol in currentElements) {
                    const count = currentElements[symbol];
                    const element = elementsData.find(e => e.symbol === symbol);
                    const subtotalMass = element.mass * count;

                    const elementEl = document.createElement('div');
                    elementEl.className = 'bg-gray-700 text-white rounded-lg px-4 py-2 flex items-center gap-2 text-xl font-bold';
                    elementEl.innerHTML = `
                        <span>${symbol}</span>
                        <span class="text-sm bg-gray-600 px-1 rounded">${count}</span>
                        <span class="text-sm text-gray-400 font-mono ml-1">${subtotalMass.toFixed(2)} g</span>
                    `;
                    currentMoleculeEl.appendChild(elementEl);
                }
            }
            molarMassEl.textContent = currentMolarMass.toFixed(2);
        }

        // Function to reset the game state
        function resetGame() {
            currentElements = {};
            currentMolarMass = 0;
            gameMessageEl.textContent = '';
            renderCurrentMolecule();
        }

        // Event listener for the "Check Formula" button
        checkBtn.addEventListener('click', () => {
            const targetAtoms = currentTarget.atoms;
            const singleMoleMass = calculateMolarMass(targetAtoms);
            const totalTargetMass = singleMoleMass * currentTarget.moles;
            
            // Check if molar mass is close enough (due to floating point issues)
            const massMatch = Math.abs(currentMolarMass - totalTargetMass) < 0.02;
            
            // Check if the overall ratio of elements matches
            const currentRatio = Object.keys(currentElements).map(key => ({
                symbol: key,
                count: currentElements[key]
            })).sort((a, b) => a.symbol.localeCompare(b.symbol));

            const targetRatio = Object.keys(targetAtoms).map(key => ({
                symbol: key,
                count: targetAtoms[key] * currentTarget.moles
            })).sort((a, b) => a.symbol.localeCompare(b.symbol));
            
            let isRatioMatch = false;
            if (currentRatio.length === targetRatio.length) {
              isRatioMatch = currentRatio.every((val, index) => {
                return val.symbol === targetRatio[index].symbol && val.count === targetRatio[index].count;
              });
            }

            if (massMatch && isRatioMatch) {
                gameMessageEl.innerHTML = `<span class="text-green-400">Correct! You formed ${currentTarget.moles} moles of ${currentTarget.name}.</span>`;
                moleculesBuilt++;
                moleculesBuiltEl.textContent = moleculesBuilt;
                setTimeout(nextMolecule, 2000);
            } else {
                gameMessageEl.innerHTML = `<span class="text-red-400">Incorrect formula. The total molar mass or element ratios are wrong. Try again!</span>`;
            }
        });

        // Event listener for the "Clear" button
        clearBtn.addEventListener('click', resetGame);

        // Event listener for the "Hint" button
        hintBtn.addEventListener('click', () => {
            if (currentTarget) {
                const singleMoleMass = calculateMolarMass(currentTarget.atoms);
                const totalTargetMass = singleMoleMass * currentTarget.moles;
                showMessage(`Hint: The formula for one mole of ${currentTarget.name} is ${currentTarget.formula}. The total molar mass you need for this challenge is ${totalTargetMass.toFixed(2)} g/mol.`);
            }
        });

        // Event listener for difficulty change
        difficultySelect.addEventListener('change', () => {
            startGame();
        });

        // Message box button event listener
        messageBtn.addEventListener('click', hideMessage);

        // Initial setup
        renderElements();
        startGame();
    </script>
</body>
</html>
